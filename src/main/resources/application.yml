server:
  port: 8078

  tomcat:
    uri-encoding: UTF-8
    max-connections: 10000
    max-threads: 2000
#访问时的项目名称
#  servlet:
#    context-path: /hypering

spring:
  #  jpa:
  #      # 配置 DBMS 类型
  #      database: MYSQL
  #      # 配置是否将执行的 SQL 输出到日志
  #      show-sql: true
  #  activiti:
  ##      database-schema: true
  ##      database-schema-update: true
  ##      check-process-definitions: true
  #      process-definition-location-prefix: classpath:/processes
  datasource:
    druid:
      # JDBC 配置
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://localhost:3306/yangzi?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: root
      password: 123456
      # 连接池配置
      filters: wall,stat,log4j2
      initial-size: 1
      max-active: 20
      min-idle: 1
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-open-prepared-statements: 20
      async-init: true
      # 监控配置之WebStatFilter配置
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
      # 监控配置之StatViewServlet配置
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
        login-username: admin
        login-password: admin
        allow: 192.168.1.1/24
        deny: 39.98.43.234
      filter:
        stat:
          db-type: mysql
        wall:
          enabled: true
          db-type: mysql
        log4j2:
          enabled: true
          statement-create-after-log-enabled: false
          statement-close-after-log-enabled: false
          result-set-open-after-log-enabled: false
          result-set-close-after-log-enabled: false
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    timeout: 1000
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 1000MB
    #============== kafka ===================
    # 指定kafka server的地址，集群配多个，中间，逗号隔开
#  kafka:
#    bootstrap-servers: 39.98.43.234:9092
#        #=============== provider  =======================
#    producer:
#    # 每次批量发送消息的数量,produce积累到一定数据，一次发送
#      batch-size: 16384
#      # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
#      buffer-memory: 33554432
#      # 指定消息key和消息体的编解码方式
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
#      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
#      retries: 0
#      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#      #可以设置的值为：all, -1, 0, 1
#      acks: 1
#
#      #=============== consumer  =======================
#      # 指定默认消费者group id
#    consumer:
#    # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
#      auto-offset-reset: earliest
#      group-id: test-hello-group
#      # enable.auto.commit:true --> 设置自动提交offset
#      enable-auto-commit: true
#      #如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
#      auto-commit-interval: 100
#    # 指定消息key和消息体的编解码方式
#      value-deserializer: org.apache.kafka.common.serialization.StringSerializer
#      key-deserializer: org.apache.kafka.common.serialization.StringSerializer

pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql

#mybatis
mybatis-plus:
  mapper-locations: classpath*:mapper/**/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.ltl.yangzi.entity
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 0
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #序列接口实现类配置
    #key-generator: com.baomidou.springboot.xxx
    #逻辑删除配置
    logic-delete-value: 1
    logic-not-delete-value: 0
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
    #自定义SQL注入器
  #    sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    call-setters-on-nulls: true
